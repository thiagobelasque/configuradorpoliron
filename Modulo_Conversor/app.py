#!/usr/bin/env python3.11
# -*- coding: utf-8 -*-
"""
M√≥dulo Conversor Poliron - Interface Web
Aplicativo Streamlit para convers√£o de especifica√ß√µes de cabos
"""

import streamlit as st
import pandas as pd
from pathlib import Path
import sys
from datetime import datetime
from io import BytesIO

# Adicionar diret√≥rio de scripts ao path
sys.path.insert(0, str(Path(__file__).parent / "scripts"))

from conversor_poliron import ConversorPoliron

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="M√≥dulo Conversor Poliron",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin-bottom: 2rem;
    }
    .success-box {
        padding: 1rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .info-box {
        padding: 1rem;
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .warning-box {
        padding: 1rem;
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def converter_df_para_excel(df):
    """Converte DataFrame para Excel em mem√≥ria"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Convers√£o')
    return output.getvalue()

def main():
    """Fun√ß√£o principal do aplicativo"""
    
    # Cabe√ßalho
    st.markdown('<div class="main-header">‚ö° M√≥dulo Conversor Poliron</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Convers√£o autom√°tica de especifica√ß√µes t√©cnicas de cabos para c√≥digos Poliron</div>', unsafe_allow_html=True)
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("‚ÑπÔ∏è Sobre o Sistema")
        st.markdown("""
        Este sistema converte automaticamente especifica√ß√µes t√©cnicas de cabos el√©tricos 
        para o formato de c√≥digos da marca Poliron.
        
        **Tipos de cabos suportados:**
        - ‚ö° VFD (Inversor de Frequ√™ncia)
        - üìä Instrumenta√ß√£o
        - üîå Energia/Pot√™ncia
        - üéõÔ∏è Controle
        
        **Melhorias implementadas:**
        - ‚úÖ CIL apenas quando expl√≠cito
        - ‚úÖ Extra√ß√£o de cores dos condutores
        - ‚úÖ Formato correto para instrumenta√ß√£o
        """)
        
        st.divider()
        
        st.header("üìñ Como usar")
        st.markdown("""
        1. Carregue uma planilha Excel (.xlsx)
        2. Selecione a coluna com as descri√ß√µes
        3. Clique em "Converter"
        4. Fa√ßa o download do resultado
        """)
        
        st.divider()
        
        st.markdown("**Vers√£o:** 2.0 (Corrigida)")
        st.markdown("**Data:** Outubro 2025")
    
    # √Årea principal
    st.header("üìÅ Carregar Planilha")
    
    uploaded_file = st.file_uploader(
        "Selecione o ficheiro Excel com as especifica√ß√µes",
        type=['xlsx', 'xls'],
        help="Carregue uma planilha Excel contendo as especifica√ß√µes t√©cnicas dos cabos"
    )
    
    if uploaded_file is not None:
        try:
            # Carregar planilha
            df = pd.read_excel(uploaded_file)
            
            st.success(f"‚úÖ Ficheiro carregado com sucesso! {len(df)} linhas encontradas.")
            
            # Mostrar pr√©via
            st.subheader("üìã Pr√©via dos Dados")
            st.dataframe(df.head(10), use_container_width=True)
            
            # Selecionar coluna de descri√ß√£o
            st.subheader("‚öôÔ∏è Configura√ß√£o")
            colunas = df.columns.tolist()
            
            coluna_descricao = st.selectbox(
                "Selecione a coluna que cont√©m as descri√ß√µes dos cabos:",
                colunas,
                index=0 if len(colunas) > 0 else None,
                help="Esta coluna deve conter as especifica√ß√µes t√©cnicas completas"
            )
            
            # Op√ß√µes avan√ßadas
            with st.expander("üîß Op√ß√µes Avan√ßadas"):
                mostrar_detalhes = st.checkbox("Mostrar detalhes da convers√£o", value=False)
                incluir_timestamp = st.checkbox("Incluir timestamp no nome do ficheiro", value=True)
            
            # Bot√£o de convers√£o
            st.divider()
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                converter_btn = st.button(
                    "üöÄ Converter Especifica√ß√µes",
                    type="primary",
                    use_container_width=True
                )
            
            if converter_btn:
                with st.spinner("‚è≥ Convertendo especifica√ß√µes... Por favor aguarde."):
                    # Criar conversor
                    conversor = ConversorPoliron()
                    
                    # Processar planilha
                    df_resultado = conversor.processar_planilha(df, coluna_descricao)
                    
                    # Estat√≠sticas
                    total = len(df_resultado)
                    sucesso = len(df_resultado[~df_resultado['Refer√™ncia YOFC'].str.contains('N√£o consegui', na=False)])
                    falhas = total - sucesso
                    taxa_sucesso = (sucesso / total * 100) if total > 0 else 0
                    
                    # Mostrar resultados
                    st.success("‚úÖ Convers√£o conclu√≠da!")
                    
                    # M√©tricas
                    st.subheader("üìä Estat√≠sticas da Convers√£o")
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Total de Linhas", total)
                    with col2:
                        st.metric("Convertidas", sucesso, delta=f"{taxa_sucesso:.1f}%")
                    with col3:
                        st.metric("Falhas", falhas, delta_color="inverse")
                    with col4:
                        # Contar tipos
                        vfd = len(df_resultado[df_resultado['Refer√™ncia YOFC'].str.contains('VFD', na=False)])
                        inst = len(df_resultado[df_resultado['Refer√™ncia YOFC'].str.match(r'^\d{3} ', na=False)])
                        st.metric("VFD + Inst.", vfd + inst)
                    
                    # Distribui√ß√£o por tipo
                    if mostrar_detalhes:
                        st.subheader("üìà Distribui√ß√£o por Tipo de Cabo")
                        
                        vfd_count = len(df_resultado[df_resultado['Refer√™ncia YOFC'].str.contains('VFD', na=False)])
                        inst_count = len(df_resultado[df_resultado['Refer√™ncia YOFC'].str.match(r'^\d{3} ', na=False)])
                        energia_count = len(df_resultado[df_resultado['Refer√™ncia YOFC'].str.contains('CE ', na=False)])
                        controle_count = len(df_resultado[df_resultado['Refer√™ncia YOFC'].str.contains('CM |CA ', na=False, regex=True)])
                        
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("‚ö° VFD", vfd_count)
                        with col2:
                            st.metric("üìä Instrumenta√ß√£o", inst_count)
                        with col3:
                            st.metric("üîå Energia", energia_count)
                        with col4:
                            st.metric("üéõÔ∏è Controle", controle_count)
                    
                    # Mostrar resultado
                    st.subheader("üìÑ Resultado da Convers√£o")
                    st.dataframe(df_resultado, use_container_width=True)
                    
                    # Mostrar falhas se houver
                    if falhas > 0:
                        st.warning(f"‚ö†Ô∏è {falhas} especifica√ß√£o(√µes) n√£o puderam ser convertidas. Verifique os detalhes abaixo:")
                        df_falhas = df_resultado[df_resultado['Refer√™ncia YOFC'].str.contains('N√£o consegui', na=False)]
                        st.dataframe(df_falhas[[coluna_descricao, 'Refer√™ncia YOFC']], use_container_width=True)
                    
                    # Preparar download
                    st.divider()
                    st.subheader("üíæ Download do Resultado")
                    
                    # Gerar nome do ficheiro
                    if incluir_timestamp:
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        nome_ficheiro = f"Especificacoes_Convertidas_{timestamp}.xlsx"
                    else:
                        nome_ficheiro = "Especificacoes_Convertidas.xlsx"
                    
                    # Converter para Excel
                    excel_data = converter_df_para_excel(df_resultado)
                    
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        st.download_button(
                            label="üì• Download Planilha Convertida",
                            data=excel_data,
                            file_name=nome_ficheiro,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            type="primary",
                            use_container_width=True
                        )
                    
                    st.success(f"‚úÖ Pronto para download: {nome_ficheiro}")
        
        except Exception as e:
            st.error(f"‚ùå Erro ao processar o ficheiro: {str(e)}")
            st.exception(e)
    
    else:
        # Instru√ß√µes quando n√£o h√° ficheiro carregado
        st.info("üëÜ Carregue uma planilha Excel para come√ßar a convers√£o")
        
        st.markdown("---")
        
        # Exemplo de formato esperado
        st.subheader("üìù Formato Esperado da Planilha")
        
        exemplo_df = pd.DataFrame({
            'Descri√ß√£o': [
                'CABO PARA INVERSOR DE FREQUENCIA... - 3Cx4mm2+1Cx4mm2',
                'CABO DE BAIXA TENSAO... - 1Cx70mm2',
                'CABO DE INSTRUMENTACAO... - 12Px2.5mm2'
            ]
        })
        
        st.dataframe(exemplo_df, use_container_width=True)
        
        st.markdown("""
        **Observa√ß√µes:**
        - A planilha deve conter uma coluna com as descri√ß√µes completas dos cabos
        - A forma√ß√£o do cabo deve estar no final da descri√ß√£o (ex: `- 3Cx4mm2+1Cx4mm2`)
        - O sistema identifica automaticamente o tipo de cabo e aplica as regras correspondentes
        """)

if __name__ == "__main__":
    main()

